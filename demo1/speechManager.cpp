#include <iostream>
using namespace std;
#include <string>
#include "speechManager.h"
#include <functional>
#include <numeric>
#include <algorithm>
#include <deque>


SpeechManager::SpeechManager()
{
    //初始化
    SpeechManager::initSpeech();
    SpeechManager::createSpeaker();
}

void SpeechManager::show_Menu()
{
	cout << "********************************************" << endl;
	cout << "*************  欢迎参加演讲比赛 ************" << endl;
	cout << "*************  1.开始演讲比赛  *************" << endl;
	cout << "*************  2.查看往届记录  *************" << endl;
	cout << "*************  3.清空比赛记录  *************" << endl;
	cout << "*************  0.退出比赛程序  *************" << endl;
	cout << "********************************************" << endl;
	cout << endl;
}

void SpeechManager::exitsystem()
{
    cout << "欢迎下次使用" << endl;
    system("pause");
    exit(0);
}

void SpeechManager::initSpeech()
{
    this->v1.clear();
    this->v2.clear();
    this->vVictory.clear();
    this->m_Speaker.clear();
    this->m_index = 1;
    this->m_Record.clear();

}

void SpeechManager::createSpeaker()
{
    string nameseed = "ABCDEFGHIJKL";
    for(int i = 0; i < nameseed.size(); i++)
    {
        string name = "选手";
        name += nameseed[i];

        Speaker sp;
        sp.m_Name = name;

        for(int j = 0; j < 2; j++)
        {
            sp.m_Score[j] = 0;
        }

        this->v1.push_back(i + 10001);

        this->m_Speaker.insert(make_pair(i + 10001, sp));

    }
}

void SpeechManager::printSpeaker(const map<int, Speaker>&m)
{
    for(map<int, Speaker>::const_iterator it = m.begin(); it != m.end(); it++)
    {
        cout << "选手编号:" << it->first
             << "姓名:" << it->second.m_Name
             << "分数:" << it->second.m_Score[0] << endl;
    }
    cout << endl;

}

void SpeechManager::speechDraw()
{
    cout << "第 << " << this->m_index << " >> 轮比赛选手正在抽签"<<endl;
	cout << "---------------------" << endl;
	cout << "抽签后演讲顺序如下：" << endl;

    if(this->m_index == 1)
    {
        random_shuffle(v1.begin(), v1.end());
        for (vector<int>::iterator it = v1.begin(); it != v1.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
    }
    else
    {
        random_shuffle(v2.begin(), v2.end());
		for (vector<int>::iterator it = v2.begin(); it != v2.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
    }
    cout << "---------------------" << endl;
	system("pause");
	cout << endl;

}

void SpeechManager::speechContest()
{
    cout << "------------- 第"<< this->m_index << "轮正式比赛开始：------------- " << endl;

    //临时容器存放小组分数
    multimap<double, int, greater<int>> groupScore;

    int num = 0;
    
    vector<int>v_Src;
    if(this->m_index == 1)
    {
        v_Src = v1;
    }
    else
    {
        v_Src = v2;
    }
    //遍历所有选手进行比赛
    for(vector<int>::iterator it = v_Src.begin(); it != v_Src.end(); it++)
    {
        num++;
        //打分
        deque<double> d;
        for(int i = 0; i < 10; i++)
        {
            double score = rand()%401 + 600 / 10.f;
            // cout << score << " ";
            d.push_back(score);
        }

        sort(d.begin(), d.end(), greater<double>());
        d.pop_front();
        d.pop_back();

        double sum = accumulate(d.begin(), d.end(), 0);
        double avg = sum / (double)d.size();

        //平均分放入map
        this->m_Speaker[*it].m_Score[this->m_index - 1] = avg;

        groupScore.insert(make_pair(avg, *it));

        if(num % 6 == 0)
        {
            cout << "第" << num / 6 << "小组比赛名次：" << endl;
            for (multimap<double, int, greater<int>>::iterator it = groupScore.begin(); it != groupScore.end(); it++)
            {
                cout << "编号: " << it->second << " 姓名： " << this->m_Speaker[it->second].m_Name << " 成绩： " 
                     << this->m_Speaker[it->second].m_Score[this->m_index - 1] << endl;
            }

            int count = 0;
			//取前三名
			for (multimap<double, int, greater<int>>::iterator it = groupScore.begin(); it != groupScore.end() && count < 3; it++, count++)
			{
				if (this->m_index == 1)
				{
					v2.push_back((*it).second);
				}
				else
				{
					vVictory.push_back((*it).second);
				}
			}

            groupScore.clear();

			cout << endl;
        }



    }
	
	cout << "------------- 第" << this->m_index << "轮比赛完毕  ------------- " << endl;
	system("pause");
}

void SpeechManager::showScore()
{
	cout << "---------第" << this->m_index << "轮晋级选手信息如下：-----------" << endl;
	vector<int>v;
	if (this->m_index == 1)
	{
		v = v2;
	}
	else
	{
		v = vVictory;
	}

	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << "选手编号：" << *it << " 姓名： " << m_Speaker[*it].m_Name << " 得分： " << m_Speaker[*it].m_Score[this->m_index - 1] << endl;
	}
	cout << endl;

	system("pause");
	system("cls");
	this->show_Menu(); 
}

void SpeechManager::startSpeech()
{
    //第一轮比赛
	//1、抽签
	SpeechManager::speechDraw();
	//2、比赛
    SpeechManager::speechContest();

	//3、显示晋级结果
    SpeechManager::showScore();

	//第二轮比赛
    this->m_index++;
	//1、抽签
    SpeechManager::speechDraw();
	//2、比赛
    SpeechManager::speechContest();
	//3、显示最终结果
    SpeechManager::showScore();
	//4、保存分数
    SpeechManager::saveRecord();

    this->initSpeech();
    this->createSpeaker();
    this->loadRecord();
    cout << "end" <<endl;

	system("pause");
	system("cls");
}

void SpeechManager::saveRecord()
{
    ofstream ofs;
    ofs.open("speech.csv", ios::out | ios::app);
    for (vector<int>::iterator it = vVictory.begin(); it != vVictory.end(); it++)
    {
        ofs << *it << "," << m_Speaker[*it].m_Score[1] << ",";
    }
    ofs << endl;

    ofs.close();
    cout << "记录已经保存" << endl;
}

void SpeechManager::loadRecord()
{
	ifstream ifs("speech.csv", ios::in); //输入流对象 读取文件

	if (!ifs.is_open())
	{
		this->fileIsEmpty = true;
		cout << "文件不存在！" << endl;
		ifs.close();
		return;
	}

    //文件清空的情况
	char ch;
	ifs >> ch;
	if (ifs.eof())
	{
		cout << "文件为空!" << endl;
		this->fileIsEmpty = true;
		ifs.close();
		return;
	}

	//文件不为空
	this->fileIsEmpty = false;

	ifs.putback(ch); //读取的单个字符放回去

	string data;
	int index = 0;
	while (ifs >> data)
	{
		// cout << data << endl;
		vector<string>v;

		int pos = -1;
		int start = 0;

		while (true)
		{
			pos = data.find(",", start); //从0开始查找 ','
			if (pos == -1)
			{
				break; //找不到break返回
			}
			string tmp = data.substr(start, pos - start); //找到了,进行分割 参数1 起始位置，参数2 截取长度
			v.push_back(tmp);
			start = pos + 1;
		}

		this->m_Record.insert(make_pair(index, v));
		index++;
	}

	ifs.close();
}

void SpeechManager::showRecord()
{
	for (int i = 0; i < this->m_Record.size(); i++)
	{
		cout << "第" << i + 1 << "届 " <<
			"冠军编号：" << this->m_Record[i][0] << " 得分：" << this->m_Record[i][1] << " "
			"亚军编号：" << this->m_Record[i][2] << " 得分：" << this->m_Record[i][3] << " "
			"季军编号：" << this->m_Record[i][4] << " 得分：" << this->m_Record[i][5] << endl;
	}
    system("pause");
	system("cls");
}

void SpeechManager::clearRecord()
{
	cout << "确认清空？" << endl;
	cout << "1、确认" << endl;
	cout << "2、返回" << endl;

	int select = 0;
	cin >> select;

	if (select == 1)
	{
		//打开模式 ios::trunc 如果存在删除文件并重新创建
		ofstream ofs("speech.csv", ios::trunc);
		ofs.close();

		//初始化属性
		this->initSpeech();

		//创建选手
		this->createSpeaker();

		//获取往届记录
		this->loadRecord();
		

		cout << "清空成功！" << endl;
	}

	system("pause");
	system("cls");
}

SpeechManager::~SpeechManager()
{

}

